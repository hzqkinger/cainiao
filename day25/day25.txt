############################### 进程组 ########################################
1.一个进程组可以包含多个进程
   进程组中的这些进程之间不是孤立的，它们彼此之间或者是存在父子·兄弟关系，或者在功能上有相近的联系

2.那linux为什么要有进程组呢？其实提供进程组就是为了方便管理这些进程。
   假设要完成一个任务，需要同时并发100个进程，当用户由于某种原因要终止这个任务时，要是没有进程组，就需要一个个去杀死这些进程，
   设置了进程组之后，就可以通过杀死整个进程组来关闭这100个进程。(注意，只要某进程组中存在一个进程，则该进程组就会存在，这与其组长进程是否终止无关)

3.每个进程必定属于每一个进程组，也只能属于一个进程组。
  一个进程除了有进程ID外，还有一个进程组ID，每个进程组也有唯一的进程组ID。
  每个进程组有一个进程组组长，进程组组长的进程ID和组ID相同

4.函数getpgrp和getpgid可以返回调用进程的进程组ID
  #include<unistd.h>
  pid_t getpgrp();
  pid_t getpgid(pid_t pid);

5.函数setpgid可以使进程加入现有的组会者创建一个新进程组
  #include<stdio.h>
  int setpgid(pid_t pid,pid_t pgid);

############################## 会话 #############################################
1.一个会话又可以包含多个进程组。一个会话对应一个控制终端。

2.linux是一个多用户多任务的分时操作系统，必须要支持多个用户同时登录同一个操作系统，当一个用户登录一次终端时就会产生一个会话
   每个会话有一个会话首进程，即创建会话的进程，建立与终端连接的就是这个会话首进程，也被成为控制进程。

3.一个会话可以包含多个进程组，这些进程组可以被分为一个前台进程组和一个或多个后台进程组。
   
   为什么要这么分呢?
  前台进程组是指需要与终端进行交互的进程组（只能有一个）。比如，有些进程是需要完成IO操作的，呢么这个进程就会被设置为前台进程组。
  当我们键入终端的中断建和退出建时，就会将信号发送到前台进程组中的所有进程；
  而后台进程组是指不需要与终端进程交互的进程组（可以有多个）。比如一些进程不需要完成IO操作，或者一些守护进程就会被设置为后台进程组
   
4.进程调用setsid函数建立一个新会话
  #include<unistd.h>
  pid_t setsid(pid_t pid);
  
######################### 终端 ###########################################
1.会话的领头进程打开一个终端之后，该终端就会成为该会话的控制终端
   与控制终端建立连接的会话领头进程称为控制进程

2.一个会话最多只能有一个控制终端，产生在控制终端上的输入和信号将发送给会话的前台进程组中的所有进程


##################### 守护进程的创建规则 #####################################################
1.首先调用umask将文件模式创建屏蔽字设置为0.
  原因在于：由继承得来的文件模式创建屏蔽字可能会拒绝设置某些权限。比如守护进程要创建一个可读可写的文件，而继承的文件模式
            创建屏蔽字可能屏蔽了写权限，导致功能缺失

2.调用fork，然后使父进程退出
  原因在于：第一.如果该守护进程是作为一条简单的shell命令的话，那么父进程退出使得shell认为这条命令已经执行完毕。
            第二.子进程继承了父进程的进程组ID，但具有一个新的进程id，保证了子进程不是一个进程组的组长

3.调用setsid创建一个新会话，并成为session leader。
  原因在于：子进程会从父进程那继承下来进程组·登录会话·控制终端，而我们的目的就是要摆脱它们，使子进程不受它们的影响

4.将当前工作目录更改为根目录。使用chdir修改当前的工作目录。
  原因在于：从当前父进程继承来的当前工作目录可能在意个装配文件系统中，因为守护进程通常在系统再引导之前是一直存在的；
            如果当前守护进程目录在一个装配文件系统中，那么该文件系统不能被卸载。

5.关闭不再需要的文件描述符。
  原因在于：可以使得守护进程不再持有从父进程继承来的某些文件描述符

6.忽略SIGCHILD信号。子进程退出时不再向父进程发送SIGCHILD信号















